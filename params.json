{"name":"Android Fast Image Loader","tagline":"New approach to image loading to provide the fastest and most lightweight image handling possible.","body":"# Android Fast Image Loader   \r\nNew approach to image loading that overcomes Android memory management limitation by leveraging size, density, config, aggressive bitmap reuse and super-fast disk loading, to provide the fastest and most lightweight image handling possible.   \r\n\r\nThis library requires fine-tuning work, if you are just looking for simple library I would recommend: [Picasso][1], [Glide][2], [Universal Image Loader][3] or [Volley][4].   \r\n\r\n### Quick Start   \r\n```      \r\ncompile  'com.theartofdev:fast-image-loader:0.8.+'\r\n```   \r\n\r\nsoon…   \r\n\r\n### Features   \r\n \r\n* Smart memory and disk caching.  \r\n* Super-fast, asynchronous, disk cache loading.  \r\n* Asynchronous and parallel download.  \r\n* Low memory footprint and optimizations for memory pressure.  \r\n* Image services support ( [Thumbor ][5], [imgIX ][6], etc.)  \r\n* Highly customizable specification loading (size/format/density/bitmap config/etc.)  \r\n* Alternative specification loading.  \r\n* Pre-fetch download images.  \r\n* Advanced bitmaps reuse using inBitmap, reusing bitmaps on destroy and invisibility.  \r\n* Smart prioritization and canceling of image load requests, more than list item reuse.  \r\n* Placeholder, round rendering, fade-in animation support.  \r\n* Extensive extensibility.  \r\n* Logging and analytics hooks.  \r\n* Debug indicator (loaded from Memory/Disk/Network).    \r\n   \r\n\r\n### Leverage Size, Density and Config   \r\nThere is a little benefit to download 1500x1500 pixel (450 ppi) image that will take **8.5 MB**  of memory to show 500x500 preview in a feed where the user scrolls quickly. It will be much better to decrees the image density by half and use 565 bitmap config lowering the memory footprint to **1 MB** , empirically, without loss of quality.   \r\n\r\n### Aggressive bitmap reuse   \r\nTo limit the amount of memory allocated and GC work the library reused bitmaps as soon as they are no longer visible in the UI.   \r\n \r\n* Activity/Fragment images that have not been destroyed but are no longer visible (onStop has been called) are eligible for bitmap reuse.  \r\n* When the Activity/Fragment becomes visible again, if the bitmap was reused, the image is reload.  \r\n* After initial allocations, bitmap reuse prevents almost all subsequent allocations.  \r\n* High disk loading performance make this process seamless.    \r\n   \r\n\r\n### High disk cache performance   \r\n \r\n* Up to 5-8 times faster load of cached images from disk.  \r\n* Will add benchmark comparison…    \r\n   \r\n\r\n### License   \r\n  The MIT License (MIT)   \r\n  Copyright (c) 2015 Arthur Teplitzki   \r\n  See [license.md][7]     \r\n\r\n[1]: http://square.github.io/picasso/\r\n[2]: https://github.com/bumptech/glide\r\n[3]: https://github.com/nostra13/Android-Universal-Image-Loader\r\n[4]: https://github.com/mcxiaoke/android-volley\r\n[5]: https://github.com/thumbor/thumbor\r\n[6]: http://www.imgix.com/\r\n[7]: https://github.com/ArthurHub/Android-Fast-Image-Loader/blob/master/license.md\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}